.. _rm-add-calculated-fields:

=====================
Add Calculated Fields
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Calculated fields let you create new fields in your documents by
combining values from existing database columns using JavaScript
expressions. Calculated fields are evaluated each time a row is
processed during a sync job.

Before you Begin
----------------

To create a calculated field, you must define a mapping rule.

To create mapping rules, see the following pages:

- :ref:`rm-new-rules-from-mappings`

- :ref:`rm-create-rule-to-mdb`

- :ref:`rm-create-mapping-rules`

About this Task
---------------

Calculated field expressions access values from the current source
database row using the syntax ``columns["COLUMN_NAME"]``.

Steps
-----

#. From the ``Mapping`` screen, click a table or collection name on the
   ``schema model`` pane or diagram view.

#. Add a new mapping rule or edit an existing mapping rule.

#. Click the ``+`` icon to the right of the ``All fields`` label.

#. Define a name for the new field in the ``Field Name`` text box.

#. Define a valid JavaScript expression for the new field in the ``Value
   expression`` text box.

#. Click ``Done``.

#. Click ``Save and close``.

The new field is visible in MongoDB after your next sync job runs.

Examples
--------

The following examples show JavaScript expressions that you can use in
calculated fields:

Concatenate Strings
~~~~~~~~~~~~~~~~~~~

Combine two columns into a single field.

Expression:

.. code-block:: none

    columns["firstName"] + ' ' + columns["lastName"]

Input:

.. list-table::
   :header-rows: 1
   :widths: 10 10

   * - Column
     - Value

   * - ``firstName``
     - ``John``

   * - ``lastName``
     - ``Smith``

Output: 
   
.. code-block:: none

   "John Smith"

Split Strings
~~~~~~~~~~~~~

Split column values based on a specified character.

Expression:

.. code-block:: none

    columns["fullName"].split(' ')[0]

Input:

.. code-block:: none
    
   fullName: "John Doe"

Output: 
   
.. code-block:: none

   "John"

Replace Strings
~~~~~~~~~~~~~~~

Apply regex patterns to replace string values in a column.

Expression:

.. code-block:: none

    columns["fullName"].replace(/smith/i, "Doe")

Input:

.. code-block:: none
    
   fullName: "John Smith"

Output: 
   
.. code-block:: none

   "John Doe"

Check for String Values
~~~~~~~~~~~~~~~~~~~~~~~

Return true or false for column containing a string value.

Expression:

.. code-block:: none

    columns["fullName"].includes("Smith")

Input:

.. code-block:: none
    
   fullName: "John Smith"

Output: 
   
.. code-block:: none

   true

Perform Mathematic Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Perform mathematic operations on column values.

Expression:

.. code-block:: none

    columns["col1"] * columns["col2"]

Input:

.. code-block:: none
    
   col1: 3
   col2: 2

Output: 
   
.. code-block:: none

   6

Assign Values based on Logical Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Assign column values based on logical conditions.

Expression:

.. code-block:: none

    columns["col1"] === 1 ? "yes" : "no"

Input:

.. code-block:: none
    
   col1: 1

Output: 
   
.. code-block:: none

   yes

Extract JSON Values
~~~~~~~~~~~~~~~~~~~

Access data stored as JSON data type with calculated field expressions.
Requires JSON data type columns (Postgres).

Expression:

.. code-block:: none

    columns["Employee"].Address.state

Input:

.. code-block:: json
    
   {
      Employee: { 
         name: "Mark",
         Address: {
            state: "California"
         } 
      }
   }
            
Output: 
   
.. code-block:: none

   "California"

Access Array Elements
~~~~~~~~~~~~~~~~~~~~~

Access data stored as array data type with calculated fields
expressions. Requires array data type columns (Postgres or MySQL).

Expression:

.. code-block:: none

    columns["myArray"][0]

Input:

.. code-block:: json
    
   myArray: ["a","b","c"]
            
Output: 
   
.. code-block:: none

   "a"

Parse Dates
~~~~~~~~~~~

Parse an ISO8601-formatted date string into a date.

Expression:

.. code-block:: none

    new Date(columns["dateAsString"])

Input:

.. code-block:: json
    
   dateAsString: "2009-02-11"
            
Output: 
   
.. code-block:: none

   2009-02-11T0:00:00Z

Learn More
----------

- :ref:`rm-delete-calulcated-fields`
- :ref:`rm-edit-calculated-fields`
- :ref:`rm-view-calculated-fields`
